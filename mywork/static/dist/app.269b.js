/*!
 * *******************
 *  Wemakeprice Frontend Bundling 
 * ********************
 */
webpackJsonp([0],{"116":function(module,exports,__webpack_require__){"use strict";function _interopRequireWildcard(obj){if(obj&&obj.__esModule)return obj;var newObj={};if(null!=obj)for(var key in obj)Object.prototype.hasOwnProperty.call(obj,key)&&(newObj[key]=obj[key]);return newObj.default=obj,newObj}var _App=__webpack_require__(120),_MathAPI=__webpack_require__(59),MathAPI=_interopRequireWildcard(_MathAPI);!function(){console.log(MathAPI.pi),console.log(_MathAPI.pi),console.log(_App.render),console.log(_App.App)}()},"117":function(module,exports,__webpack_require__){"use strict";__webpack_require__(304)},"119":function(module,exports,__webpack_require__){"use strict";function _interopRequireWildcard(obj){if(obj&&obj.__esModule)return obj;var newObj={};if(null!=obj)for(var key in obj)Object.prototype.hasOwnProperty.call(obj,key)&&(newObj[key]=obj[key]);return newObj.default=obj,newObj}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(exports,"__esModule",{"value":!0}),exports.App=void 0;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),_App=__webpack_require__(303),styles=_interopRequireWildcard(_App);exports.App=function(){function App(options){_classCallCheck(this,App),this.props=_extends({"dom":null,"rest":"test rest"},options),this.props.dom.innerHTML="Loading from github..."}return _createClass(App,[{"key":"render","value":function(json){if(json){var trs=json.items.map(function(item){return"<tr>"+['<a href="'+item.html_url+'" target="_blank">'+item.full_name+"</a>",item.score].map(function(r){return"<td>"+r+"</td>"}).join("")+"</tr>"}).join(""),table=document.createElement("table");table.classList.add(styles.table);var thead="<thead><tr>"+["name","correlation"].map(function(t){return"<th>"+t+"</th>"}).join("")+"</tr></thead>",tbody="<tbody>"+trs+"</tbody>";table.innerHTML=""+"<caption>Popular ES6 projects at github.com</caption>"+thead+tbody,this.props.dom.innerHTML="",this.props.dom.appendChild(table)}}}]),App}()},"120":function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{"value":!0});var _App=__webpack_require__(119);Object.keys(_App).forEach(function(key){"default"!==key&&"__esModule"!==key&&Object.defineProperty(exports,key,{"enumerable":!0,"get":function(){return _App[key]}})})},"303":function(module,exports){},"304":function(module,exports){},"308":function(module,exports,__webpack_require__){__webpack_require__(117),module.exports=__webpack_require__(116)},"59":function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{"value":!0});var _math=__webpack_require__(60);Object.keys(_math).forEach(function(key){"default"!==key&&"__esModule"!==key&&Object.defineProperty(exports,key,{"enumerable":!0,"get":function(){return _math[key]}})})},"60":function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{"value":!0});exports.sum=function(a,b){return a+b},exports.pi=3.14;exports.default=function(x){return x*x}}},[308]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vYXBwLjI2OWIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcF9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYm9vdHN0cmFwX3Rlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC9BcHAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvTWF0aEFQSS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvTWF0aEFQSS9tYXRoLmpzIl0sIm5hbWVzIjpbIndlYnBhY2tKc29ucCIsIjExNiIsIm1vZHVsZSIsImV4cG9ydHMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJvYmoiLCJfX2VzTW9kdWxlIiwibmV3T2JqIiwia2V5IiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVmYXVsdCIsIl9BcHAiLCJfTWF0aEFQSSIsIk1hdGhBUEkiLCJjb25zb2xlIiwibG9nIiwicGkiLCJyZW5kZXIiLCJBcHAiLCIxMTciLCIxMTkiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsInVuZGVmaW5lZCIsIl9leHRlbmRzIiwiYXNzaWduIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJzdHlsZXMiLCJvcHRpb25zIiwidGhpcyIsImRvbSIsInJlc3QiLCJpbm5lckhUTUwiLCJqc29uIiwidHJzIiwiaXRlbXMiLCJtYXAiLCJpdGVtIiwiaHRtbF91cmwiLCJmdWxsX25hbWUiLCJzY29yZSIsInIiLCJqb2luIiwidGFibGUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJ0aGVhZCIsInQiLCJ0Ym9keSIsImFwcGVuZENoaWxkIiwiMTIwIiwia2V5cyIsImZvckVhY2giLCJnZXQiLCIzMDMiLCIzMDQiLCIzMDgiLCI1OSIsIl9tYXRoIiwiNjAiLCJzdW0iLCJhIiwiYiIsIngiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUFBLGNBQWMsSUFFUkMsTUFDQSxTQUFVQyxPQUFRQyxRQUFTQyxxQkFFakMsWUFTQSxTQUFTQyx5QkFBd0JDLEtBQU8sR0FBSUEsS0FBT0EsSUFBSUMsV0FBYyxNQUFPRCxJQUFjLElBQUlFLFVBQWEsSUFBVyxNQUFQRixJQUFlLElBQUssR0FBSUcsT0FBT0gsS0FBV0ksT0FBT0MsVUFBVUMsZUFBZUMsS0FBS1AsSUFBS0csT0FBTUQsT0FBT0MsS0FBT0gsSUFBSUcsS0FBZ0MsT0FBdEJELFFBQU9NLFFBQVVSLElBQVlFLE9DZGxRLEdBQUFPLE1BQUFYLG9CQUFBLEtBRUFZLFNBQUFaLG9CQUFBLElBQVlhLFFEVUVaLHdCQUF3QlcsV0NQdEMsV0FDRUUsUUFBUUMsSUFBSUYsUUFBUUcsSUFDcEJGLFFBQVFDLElBQVJILFNBQUFJLElBQ0FGLFFBQVFDLElBQVJKLEtBQUFNLFFBQ0FILFFBQVFDLElBQVJKLEtBQUFPLFNEZ0JJQyxNQUNBLFNBQVVyQixPQUFRQyxRQUFTQyxxQkFFakMsWUU1QkFBLHFCQUFRLE1GbUNGb0IsTUFDQSxTQUFVdEIsT0FBUUMsUUFBU0MscUJBRWpDLFlBZ0JBLFNBQVNDLHlCQUF3QkMsS0FBTyxHQUFJQSxLQUFPQSxJQUFJQyxXQUFjLE1BQU9ELElBQWMsSUFBSUUsVUFBYSxJQUFXLE1BQVBGLElBQWUsSUFBSyxHQUFJRyxPQUFPSCxLQUFXSSxPQUFPQyxVQUFVQyxlQUFlQyxLQUFLUCxJQUFLRyxPQUFNRCxPQUFPQyxLQUFPSCxJQUFJRyxLQUFnQyxPQUF0QkQsUUFBT00sUUFBVVIsSUFBWUUsT0FFbFEsUUFBU2lCLGlCQUFnQkMsU0FBVUMsYUFBZSxLQUFNRCxtQkFBb0JDLGNBQWdCLEtBQU0sSUFBSUMsV0FBVSxxQ0FmaEhsQixPQUFPbUIsZUFBZTFCLFFBQVMsY0FDN0IyQixTQUFPLElBRVQzQixRQUFRbUIsSUFBTVMsTUFFZCxJQUFJQyxVQUFXdEIsT0FBT3VCLFFBQVUsU0FBVUMsUUFBVSxJQUFLLEdBQUlDLEdBQUksRUFBR0EsRUFBSUMsVUFBVUMsT0FBUUYsSUFBSyxDQUFFLEdBQUlHLFFBQVNGLFVBQVVELEVBQUksS0FBSyxHQUFJMUIsT0FBTzZCLFFBQWM1QixPQUFPQyxVQUFVQyxlQUFlQyxLQUFLeUIsT0FBUTdCLE9BQVF5QixPQUFPekIsS0FBTzZCLE9BQU83QixNQUFZLE1BQU95QixTQUVuUEssYUFBZSxXQUFjLFFBQVNDLGtCQUFpQk4sT0FBUU8sT0FBUyxJQUFLLEdBQUlOLEdBQUksRUFBR0EsRUFBSU0sTUFBTUosT0FBUUYsSUFBSyxDQUFFLEdBQUlPLFlBQWFELE1BQU1OLEVBQUlPLFlBQVdDLFdBQWFELFdBQVdDLGFBQWMsRUFBT0QsV0FBV0UsY0FBZSxFQUFVLFNBQVdGLGNBQVlBLFdBQVdHLFVBQVcsR0FBTW5DLE9BQU9tQixlQUFlSyxPQUFRUSxXQUFXakMsSUFBS2lDLGFBQWlCLE1BQU8sVUFBVWYsWUFBYW1CLFdBQVlDLGFBQWlKLE1BQTlIRCxhQUFZTixpQkFBaUJiLFlBQVloQixVQUFXbUMsWUFBaUJDLGFBQWFQLGlCQUFpQmIsWUFBYW9CLGFBQXFCcEIsZ0JHaERoaUJaLEtBQUFYLG9CQUFBLEtBQVk0QyxPSG9EQzNDLHdCQUF3QlUsS0FNM0JaLFNHeERHbUIsSUh3RFcsV0d0RHRCLFFBQUFBLEtBQVkyQixTQUFTeEIsZ0JBQUF5QixLQUFBNUIsS0FDbkI0QixLQUFLVCxNQUFMVCxVQUNFbUIsTUFBSyxLQUNMQyxPQUFNLGFBQ0hILFNBSUxDLEtBQUtULE1BQU1VLElBQUlFLFVBQVkseUJINkY3QixNQWxDQWQsY0FBYWpCLE1BQ1hiLE1BQUssU0FDTHFCLFFBQU8sU0cxREZ3QixNQUNMLEdBQUlBLEtBQU0sQ0FDUixHQUFNQyxLQUFNRCxLQUFLRSxNQUFNQyxJQUFJLFNBQUFDLE1BTXpCLGNBTFksWUFDRUEsS0FBS0MsU0FEUCxxQkFDb0NELEtBQUtFLFVBRHpDLE9BRVZGLEtBQUtHLE9BR1dKLElBQUksU0FBQUssR0FBQSxhQUFZQSxFQUFaLFVBQXNCQyxLQUFLLElBQWpELFVBQ0NBLEtBQUssSUFHRkMsTUFBUUMsU0FBU0MsY0FBYyxRQUNyQ0YsT0FBTUcsVUFBVUMsSUFBSXBCLE9BQU9nQixNQUUzQixJQUdNSyxzQkFBdUIsT0FBUSxlQUFlWixJQUFJLFNBQUFhLEdBQUEsYUFBWUEsRUFBWixVQUFzQlAsS0FBSyxJQUE3RSxnQkFHQVEsZ0JBQWtCaEIsSUFBbEIsVUFFTlMsT0FBTVgsVUFBTixHQVJnQix3REFRZWdCLE1BQVFFLE1BRXZDckIsS0FBS1QsTUFBTVUsSUFBSUUsVUFBWSxHQUMzQkgsS0FBS1QsTUFBTVUsSUFBSXFCLFlBQVlSLFlIZ0V4QjFDLFFBS0htRCxNQUNBLFNBQVV2RSxPQUFRQyxRQUFTQyxxQkFFakMsWUFHQU0sUUFBT21CLGVBQWUxQixRQUFTLGNBQzdCMkIsU0FBTyxHQUdULElBQUlmLE1BQU9YLG9CQUFvQixJSXhIL0JNLFFBQUFnRSxLQUFBM0QsTUFBQTRELFFBQUEsU0FBQWxFLEtBQUEsWUFBQUEsS0FBQSxlQUFBQSxLQUFBQyxPQUFBbUIsZUFBQTFCLFFBQUFNLEtBQUFrQyxjQUFBLEVBQUFpQyxNQUFBLGlCQUFBN0QsTUFBQU4sV0pzSU1vRSxNQUNBLFNBQVUzRSxPQUFRQyxXQU1sQjJFLE1BQ0EsU0FBVTVFLE9BQVFDLFdBTWxCNEUsTUFDQSxTQUFVN0UsT0FBUUMsUUFBU0MscUJBRWpDQSxvQkFBb0IsS0FDcEJGLE9BQU9DLFFBQVVDLG9CQUFvQixNQUsvQjRFLEtBQ0EsU0FBVTlFLE9BQVFDLFFBQVNDLHFCQUVqQyxZQUdBTSxRQUFPbUIsZUFBZTFCLFFBQVMsY0FDN0IyQixTQUFPLEdBR1QsSUFBSW1ELE9BQVE3RSxvQkFBb0IsR0t2S2hDTSxRQUFBZ0UsS0FBQU8sT0FBQU4sUUFBQSxTQUFBbEUsS0FBQSxZQUFBQSxLQUFBLGVBQUFBLEtBQUFDLE9BQUFtQixlQUFBMUIsUUFBQU0sS0FBQWtDLGNBQUEsRUFBQWlDLE1BQUEsaUJBQUFLLE9BQUF4RSxXTHFMTXlFLEtBQ0EsU0FBVWhGLE9BQVFDLFFBQVNDLHFCQUVqQyxZQUdBTSxRQUFPbUIsZUFBZTFCLFFBQVMsY0FDN0IyQixTQUFPLEdNNUxFcUQsYUFBTSxTQUFDQyxFQUFHQyxHQUFKLE1BQVdELEdBQUlDLEdBQ3JCakUsV0FBSyxJTmtNaEJqQixTQUFRVyxRTWpNTyxTQUFDd0UsR0FDZCxNQUFPQSxHQUFJQSxNTnNNViIsImZpbGUiOiJhcHAuMjY5Yi5qcyIsInNvdXJjZXNDb250ZW50IjpbIndlYnBhY2tKc29ucChbMF0se1xuXG4vKioqLyAxMTY6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBfQXBwID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjApO1xuXG52YXIgX01hdGhBUEkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU5KTtcblxudmFyIE1hdGhBUEkgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfTWF0aEFQSSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbihmdW5jdGlvbiAoKSB7XG4gIGNvbnNvbGUubG9nKE1hdGhBUEkucGkpO1xuICBjb25zb2xlLmxvZyhfTWF0aEFQSS5waSk7XG4gIGNvbnNvbGUubG9nKF9BcHAucmVuZGVyKTtcbiAgY29uc29sZS5sb2coX0FwcC5BcHApO1xufSkoKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDExNzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuX193ZWJwYWNrX3JlcXVpcmVfXygzMDQpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMTE5OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5BcHAgPSB1bmRlZmluZWQ7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfQXBwID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMDMpO1xuXG52YXIgc3R5bGVzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX0FwcCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBBcHAgPSBleHBvcnRzLkFwcCA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQXBwKG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQXBwKTtcblxuICAgIHRoaXMucHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICBkb206IG51bGwsXG4gICAgICByZXN0OiAndGVzdCByZXN0J1xuICAgIH0sIG9wdGlvbnMpO1xuICAgIC8vIGNvbnNvbGUubG9nKHRoaXMucHJvcHMpO1xuXG4gICAgdGhpcy5wcm9wcy5kb20uaW5uZXJIVE1MID0gJ0xvYWRpbmcgZnJvbSBnaXRodWIuLi4nO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEFwcCwgW3tcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoanNvbikge1xuICAgICAgaWYgKGpzb24pIHtcbiAgICAgICAgdmFyIHRycyA9IGpzb24uaXRlbXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgdmFyIHJvdyA9IFsnPGEgaHJlZj1cIicgKyBpdGVtLmh0bWxfdXJsICsgJ1wiIHRhcmdldD1cIl9ibGFua1wiPicgKyBpdGVtLmZ1bGxfbmFtZSArICc8L2E+JywgaXRlbS5zY29yZV07XG5cbiAgICAgICAgICByZXR1cm4gJzx0cj4nICsgcm93Lm1hcChmdW5jdGlvbiAocikge1xuICAgICAgICAgICAgcmV0dXJuICc8dGQ+JyArIHIgKyAnPC90ZD4nO1xuICAgICAgICAgIH0pLmpvaW4oJycpICsgJzwvdHI+JztcbiAgICAgICAgfSkuam9pbignJyk7XG5cbiAgICAgICAgLy8gdGFibGVcbiAgICAgICAgdmFyIHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGFibGUnKTtcbiAgICAgICAgdGFibGUuY2xhc3NMaXN0LmFkZChzdHlsZXMudGFibGUpO1xuXG4gICAgICAgIHZhciBjYXB0aW9uID0gJzxjYXB0aW9uPlBvcHVsYXIgRVM2IHByb2plY3RzIGF0IGdpdGh1Yi5jb208L2NhcHRpb24+JztcblxuICAgICAgICAvLyB0aGVhZFxuICAgICAgICB2YXIgdGhlYWQgPSAnPHRoZWFkPjx0cj4nICsgWyduYW1lJywgJ2NvcnJlbGF0aW9uJ10ubWFwKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuICc8dGg+JyArIHQgKyAnPC90aD4nO1xuICAgICAgICB9KS5qb2luKCcnKSArICc8L3RyPjwvdGhlYWQ+JztcblxuICAgICAgICAvLyB0Ym9keVxuICAgICAgICB2YXIgdGJvZHkgPSAnPHRib2R5PicgKyB0cnMgKyAnPC90Ym9keT4nO1xuXG4gICAgICAgIHRhYmxlLmlubmVySFRNTCA9ICcnICsgY2FwdGlvbiArIHRoZWFkICsgdGJvZHk7XG5cbiAgICAgICAgdGhpcy5wcm9wcy5kb20uaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIHRoaXMucHJvcHMuZG9tLmFwcGVuZENoaWxkKHRhYmxlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQXBwO1xufSgpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMTIwOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX0FwcCA9IF9fd2VicGFja19yZXF1aXJlX18oMTE5KTtcblxuT2JqZWN0LmtleXMoX0FwcCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gX0FwcFtrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDMwMzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuLyoqKi8gfSksXG5cbi8qKiovIDMwNDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuLyoqKi8gfSksXG5cbi8qKiovIDMwODpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygxMTcpO1xubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExNik7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDU5OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX21hdGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYwKTtcblxuT2JqZWN0LmtleXMoX21hdGgpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9tYXRoW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gNjA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG52YXIgc3VtID0gZXhwb3J0cy5zdW0gPSBmdW5jdGlvbiBzdW0oYSwgYikge1xuICByZXR1cm4gYSArIGI7XG59O1xudmFyIHBpID0gZXhwb3J0cy5waSA9IDMuMTQ7IC8vXG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uICh4KSB7XG4gIHJldHVybiB4ICogeDtcbn07XG5cbi8qKiovIH0pXG5cbn0sWzMwOF0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBhcHAuMjY5Yi5qcyIsImltcG9ydCB7cmVuZGVyfSBmcm9tICcuL0FwcCc7XG5pbXBvcnQge0FwcH0gZnJvbSAnLi9BcHAnO1xuaW1wb3J0ICogYXMgTWF0aEFQSSBmcm9tICcuL01hdGhBUEknO1xuaW1wb3J0IHtwaX0gZnJvbSAnLi9NYXRoQVBJJztcblxuKGZ1bmN0aW9uICgpIHtcbiAgY29uc29sZS5sb2coTWF0aEFQSS5waSk7XG4gIGNvbnNvbGUubG9nKHBpKTtcbiAgY29uc29sZS5sb2cocmVuZGVyKTtcbiAgY29uc29sZS5sb2coQXBwKTtcbn0pKCk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2FwcF9pbmRleC5qcyIsInJlcXVpcmUoJy4vdGhlbWUvdGhlbWUnKTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYm9vdHN0cmFwX3Rlc3QuanMiLCJpbXBvcnQgKiBhcyBzdHlsZXMgZnJvbSAnLi9BcHAuc2Nzcyc7XG5cbmV4cG9ydCBjbGFzcyBBcHAge1xuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICB0aGlzLnByb3BzID0ge1xuICAgICAgZG9tOiBudWxsLFxuICAgICAgcmVzdDogJ3Rlc3QgcmVzdCcsXG4gICAgICAuLi5vcHRpb25zIC8vIEVTNjogcmVzdCBwcm9wZXJ0aWVzXG4gICAgfTtcbiAgICAvLyBjb25zb2xlLmxvZyh0aGlzLnByb3BzKTtcblxuICAgIHRoaXMucHJvcHMuZG9tLmlubmVySFRNTCA9ICdMb2FkaW5nIGZyb20gZ2l0aHViLi4uJztcbiAgfVxuXG4gIHJlbmRlcihqc29uKSB7XG4gICAgaWYgKGpzb24pIHtcbiAgICAgIGNvbnN0IHRycyA9IGpzb24uaXRlbXMubWFwKGl0ZW0gPT4ge1xuICAgICAgICBjb25zdCByb3cgPSBbXG4gICAgICAgICAgYDxhIGhyZWY9XCIke2l0ZW0uaHRtbF91cmx9XCIgdGFyZ2V0PVwiX2JsYW5rXCI+JHtpdGVtLmZ1bGxfbmFtZX08L2E+YCxcbiAgICAgICAgICBpdGVtLnNjb3JlXG4gICAgICAgIF07XG5cbiAgICAgICAgcmV0dXJuIGA8dHI+JHtyb3cubWFwKHIgPT4gYDx0ZD4ke3J9PC90ZD5gKS5qb2luKCcnKX08L3RyPmA7XG4gICAgICB9KS5qb2luKCcnKTtcblxuICAgICAgLy8gdGFibGVcbiAgICAgIGNvbnN0IHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGFibGUnKTtcbiAgICAgIHRhYmxlLmNsYXNzTGlzdC5hZGQoc3R5bGVzLnRhYmxlKTtcblxuICAgICAgY29uc3QgY2FwdGlvbiA9ICc8Y2FwdGlvbj5Qb3B1bGFyIEVTNiBwcm9qZWN0cyBhdCBnaXRodWIuY29tPC9jYXB0aW9uPic7XG5cbiAgICAgIC8vIHRoZWFkXG4gICAgICBjb25zdCB0aGVhZCA9IGA8dGhlYWQ+PHRyPiR7WyduYW1lJywgJ2NvcnJlbGF0aW9uJ10ubWFwKHQgPT4gYDx0aD4ke3R9PC90aD5gKS5qb2luKCcnKX08L3RyPjwvdGhlYWQ+YDtcblxuICAgICAgLy8gdGJvZHlcbiAgICAgIGNvbnN0IHRib2R5ID0gYDx0Ym9keT4ke3Ryc308L3Rib2R5PmA7XG5cbiAgICAgIHRhYmxlLmlubmVySFRNTCA9IGAke2NhcHRpb259JHt0aGVhZH0ke3Rib2R5fWA7XG5cbiAgICAgIHRoaXMucHJvcHMuZG9tLmlubmVySFRNTCA9ICcnO1xuICAgICAgdGhpcy5wcm9wcy5kb20uYXBwZW5kQ2hpbGQodGFibGUpO1xuICAgIH1cbiAgfVxuXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvQXBwL0FwcC5qcyIsImV4cG9ydCAqIGZyb20gJy4vQXBwJztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9BcHAvaW5kZXguanMiLCJleHBvcnQgKiBmcm9tICcuL21hdGgnO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9NYXRoQVBJL2luZGV4LmpzIiwiZXhwb3J0IGxldCBzdW0gPSAoYSwgYikgPT4gKGEgKyBiKTtcbmV4cG9ydCB2YXIgcGkgPSAzLjE0OyAvL1xuZXhwb3J0IGRlZmF1bHQgKHgpID0+IHtcbiAgcmV0dXJuIHggKiB4O1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9NYXRoQVBJL21hdGguanMiXSwic291cmNlUm9vdCI6IiJ9